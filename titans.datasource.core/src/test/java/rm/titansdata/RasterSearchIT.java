package rm.titansdata;

import common.RmTimer;
import javax.measure.Measure;
import javax.measure.quantity.Length;
import javax.measure.unit.SI;
import org.junit.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.PrecisionModel;
import org.locationtech.jts.io.WKTReader;
import rm.titansdata.properties.Bounds;
import rm.titansdata.properties.Dimensions;
import rm.titansdata.raster.RasterSearch;

/**
 *
 * @author Ricardo Marquez
 */
public class RasterSearchIT {
  
  @Test
  public void test() throws Exception {
    Coordinate p1 = new Coordinate(-13964790, 3794999);
    Coordinate p2 = new Coordinate(-12605137, 5224085);
    Bounds bounds = Bounds.fromPoints(p1, p2, 3857);
    Measure<Length> dx = Measure.valueOf(1, SI.KILOMETRE); 
    Measure<Length> dy = Measure.valueOf(1, SI.KILOMETRE); 
    Dimensions dims= Dimensions.create(bounds, dx, dy);
    RasterSearch search = new RasterSearch(bounds, dims);
    GeometryFactory factory = new GeometryFactory(new PrecisionModel(PrecisionModel.FLOATING), 3857);
    String wellKnownText = "MULTIPOLYGON(((-13827009.089  -13827009.089, -13622952.8926  -13622952.8926, -13358129.1674  -13358129.1674, -13358338.8933  -13358338.8933, -13264384.2412  -13264384.2412, -13042760.1595  -13042760.1595, -12873694.1281  -12873694.1281, -12760800.0232  -12760800.0232, -12733381.2534  -12733381.2534, -12705170.0001  -12705170.0001, -12748568.4602  -12748568.4602, -12748733.213  -12748733.213, -12771100.4156  -12771100.4156, -12764063.1314  -12764063.1314, -12747826.1818  -12747826.1818, -12748983.7932  -12748983.7932, -12770443.8533  -12770443.8533, -13038204.5206  -13038204.5206, -13051754.2177  -13051754.2177, -13055265.2345  -13055265.2345, -13079950.9995  -13079950.9995, -13155773.1537  -13155773.1537, -13181352.3689  -13181352.3689, -13195726.7208  -13195726.7208, -13225475.1849  -13225475.1849, -13270855.9112  -13270855.9112, -13278076.6499  -13278076.6499, -13315183.4437  -13315183.4437, -13410688.8876  -13410688.8876, -13430264.4201  -13430264.4201, -13430665.2816  -13430665.2816, -13458253.9249  -13458253.9249, -13454521.2711  -13454521.2711, -13501302.5078  -13501302.5078, -13549134.1553  -13549134.1553, -13570038.8425  -13570038.8425, -13577984.0485  -13577984.0485, -13557388.6069  -13557388.6069, -13572962.9829  -13572962.9829, -13592654.9555  -13592654.9555, -13617546.2163  -13617546.2163, -13638627.5675  -13638627.5675, -13638208.7836  -13638208.7836, -13626118.151  -13626118.151, -13620990.9979  -13620990.9979, -13593282.5748  -13593282.5748, -13628668.5919  -13628668.5919, -13610124.9911  -13610124.9911, -13635231.2098  -13635231.2098, -13629562.1534  -13629562.1534, -13639576.2322  -13639576.2322, -13680115.8964  -13680115.8964, -13694914.9322  -13694914.9322, -13686521.2199  -13686521.2199, -13706554.6094  -13706554.6094, -13729328.5735  -13729328.5735, -13774839.2096  -13774839.2096, -13769163.2514  -13769163.2514, -13784030.3034  -13784030.3034, -13777527.2413  -13777527.2413, -13787122.6475  -13787122.6475, -13815489.1915  -13815489.1915, -13843900.8198  -13843900.8198, -13849029.754  -13849029.754, -13819369.6776  -13819369.6776, -13810743.3076  -13810743.3076, -13831980.9514  -13831980.9514, -13827009.089  -13827009.089)),((-13327332.6303  -13327332.6303, -13349140.1185  -13349140.1185, -13304811.6954  -13304811.6954, -13327332.6303  -13327332.6303)),((-13391147.4189  -13391147.4189, -13408595.4133  -13408595.4133, -13391147.4189  -13391147.4189)),((-13370431.1957  -13370431.1957, -13386026.0544  -13386026.0544, -13363118.7296  -13363118.7296, -13354641.0825  -13354641.0825, -13370431.1957  -13370431.1957)),((-13171978.5999  -13171978.5999, -13203164.0873  -13203164.0873, -13171978.5999  -13171978.5999)),((-13297562.1249  -13297562.1249, -13311363.2927  -13311363.2927, -13297562.1249  -13297562.1249)),((-13182864.9781  -13182864.9781, -13203133.4744  -13203133.4744, -13174413.6024  -13174413.6024, -13182864.9781  -13182864.9781)))";
    Geometry geometry = new WKTReader(factory).read(wellKnownText);
    RmTimer timer = RmTimer.start();
    search.getCells(geometry, (p)->1.0);
    timer.endAndPrint();
  }
}
